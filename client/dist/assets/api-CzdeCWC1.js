console.warn("NEXT_PUBLIC_BACKEND_BASE not set");class p extends Error{constructor(e,s,o){super(e),this.status=s,this.details=o,this.name="ApiError"}}async function h(n,e={}){const s=`undefined${n.startsWith("/")?"":"/"}${n}`,{method:o="GET",body:l,signal:d}=e,g={"Content-Type":"application/json"};try{const t=await fetch(s,{method:o,headers:g,body:l?JSON.stringify(l):void 0,credentials:"omit",signal:d});if(!t.ok){let c;try{c=await t.json()}catch{}throw new Error(`[API] ${o} ${n} failed: ${t.status} ${t.statusText}`+(c?` :: ${JSON.stringify(c)}`:""))}return(t.headers.get("content-type")||"").includes("application/json")?await t.json():await t.text()}catch(t){throw(t==null?void 0:t.name)==="AbortError"?new Error("[API] Request aborted"):new Error(`[API] Network/CORS error on ${o} ${n}: ${(t==null?void 0:t.message)||t}`)}}const S={health:()=>h("/health"),chat:n=>h("/chat",{method:"POST",body:n}),faq:n=>h(`/faq?subField=${encodeURIComponent(n)}`)};class f{constructor(){this.baseUrl=void 0,this.retryAttempts=3,this.retryDelay=1e3}async makeRequest(e,s={}){return h(e,s)}shouldRetry(e){return(e==null?void 0:e.name)==="NetworkError"||(e==null?void 0:e.name)==="TimeoutError"}delay(e){return new Promise(s=>setTimeout(s,e))}async checkHealth(){return S.health()}async getSubjects(){return[]}async sendChatMessage(e){const s={userQuestion:e.message,major:e.majorCategory,subField:e.subCategory,conversationId:e.sessionId,suggestCount:e.suggestCount??3,followupMode:e.followupMode??"multi"},o=await S.chat(s);return{id:`ai-${Date.now()}`,content:o.aiResponse,timestamp:new Date().toISOString(),sessionId:o.conversationId,processingTime:0,suggestions:o.suggestions}}async sendFeedback(e){return console.log(`Feedback received for message ${e.messageId}: ${e.feedback}`),{success:!0,message:"Feedback recorded"}}async testConnection(){try{return await this.checkHealth(),!0}catch{return!1}}}const w=new f;async function E(){return(await fetch("undefined/health",{credentials:"omit"})).json()}function A(n){const{q:e,major:s,subField:o,conversationId:l,onStart:d,onDelta:g,onDone:t,onError:a,signal:c}=n,u=new URL("undefined/chat/stream");u.searchParams.set("q",e),u.searchParams.set("major",s),u.searchParams.set("subField",o),u.searchParams.set("conversationId",l),console.log("ðŸ”Œ Starting SSE stream:",u.toString());const r=new EventSource(u.toString(),{withCredentials:!1}),y=()=>r.close();return c&&c.addEventListener("abort",y,{once:!0}),r.onopen=()=>console.log("âœ… SSE open"),r.onmessage=m=>{try{const i=JSON.parse(m.data);i.type==="start"?d==null||d(i.conversationId):i.type==="answer_delta"?g(i.text):i.type==="done"?(t==null||t(),r.close()):i.type==="error"&&(a==null||a(i.message),r.close())}catch{a==null||a("parse error"),r.close()}},r.onerror=m=>{console.error("ðŸ”¥ SSE Error:",m,"readyState:",r.readyState),a==null||a("connection error"),r.close()},y}async function b(n){const s=await(await fetch("undefined/suggestions",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n),credentials:"omit"})).json();return Array.isArray(s==null?void 0:s.suggestions)?s.suggestions:[]}export{p as A,w as a,b as f,E as h,A as s};
