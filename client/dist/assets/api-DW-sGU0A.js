const p="https://2kdtuncj36tas5twwm7dsgpz5y0bkfkw.lambda-url.us-east-1.on.aws".replace(/\/+$/,""),m="".replace(/\/+$/,"");class $ extends Error{constructor(e,a,n){super(e),this.status=a,this.details=n,this.name="ApiError"}}async function h(t,e={}){const a=`${p}${t.startsWith("/")?"":"/"}${t}`,{method:n="GET",body:l,signal:g}=e,i={"Content-Type":"application/json"};try{const s=await fetch(a,{method:n,headers:i,body:l?JSON.stringify(l):void 0,credentials:"omit",signal:g});if(!s.ok){let o;try{o=await s.json()}catch{}throw new Error(`[API] ${n} ${t} failed: ${s.status} ${s.statusText}`+(o?` :: ${JSON.stringify(o)}`:""))}return(s.headers.get("content-type")||"").includes("application/json")?await s.json():await s.text()}catch(s){throw(s==null?void 0:s.name)==="AbortError"?new Error("[API] Request aborted"):new Error(`[API] Network/CORS error on ${n} ${t}: ${(s==null?void 0:s.message)||s}`)}}const y={health:()=>h("/health"),chat:t=>h("/chat",{method:"POST",body:t}),faq:t=>h(`/faq?subField=${encodeURIComponent(t)}`)};class b{constructor(){this.baseUrl=p,this.retryAttempts=3,this.retryDelay=1e3}async makeRequest(e,a={}){return h(e,a)}shouldRetry(e){return(e==null?void 0:e.name)==="NetworkError"||(e==null?void 0:e.name)==="TimeoutError"}delay(e){return new Promise(a=>setTimeout(a,e))}async checkHealth(){return y.health()}async getSubjects(){return[]}async sendChatMessage(e){const a={userQuestion:e.message,major:e.majorCategory,subField:e.subCategory,conversationId:e.sessionId,suggestCount:e.suggestCount??3,followupMode:e.followupMode??"multi"},n=await y.chat(a);return{id:`ai-${Date.now()}`,content:n.aiResponse,timestamp:new Date().toISOString(),sessionId:n.conversationId,processingTime:0,suggestions:n.suggestions}}async sendFeedback(e){return console.log(`Feedback received for message ${e.messageId}: ${e.feedback}`),{success:!0,message:"Feedback recorded"}}async testConnection(){try{return await this.checkHealth(),!0}catch{return!1}}}const k=new b;async function S(){const t=await fetch(`${m}/health`,{credentials:"omit"});if(!t.ok)throw new Error(`Health check failed: ${t.status} ${t.statusText}`);return await t.json()}function A(t){const{q:e,major:a,subField:n,conversationId:l,onDelta:g,onStart:i,onDone:s,onError:r,signal:o}=t,u=new URL(`${m}/chat/stream`);u.searchParams.set("q",e),u.searchParams.set("major",a),u.searchParams.set("subField",n),u.searchParams.set("conversationId",l);const c=new EventSource(u.toString()),w=()=>c.close();return o&&o.addEventListener("abort",w,{once:!0}),c.onmessage=f=>{try{const d=JSON.parse(f.data);switch(d.type){case"start":i==null||i(d.conversationId);break;case"answer_delta":g(d.text);break;case"done":s==null||s(),c.close();break;case"error":r==null||r(d.message),c.close();break}}catch{r==null||r("Parse error"),c.close()}},c.onerror=()=>{r==null||r("Connection error"),c.close()},w}async function v(t){try{const e=await fetch(`${m}/suggestions`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"omit"});if(!e.ok)throw new Error(`HTTP ${e.status}`);const a=await e.json();return Array.isArray(a==null?void 0:a.suggestions)?a.suggestions:[]}catch(e){return console.warn("Failed to fetch suggestions:",e),[]}}export{$ as A,k as a,v as f,S as h,A as s};
