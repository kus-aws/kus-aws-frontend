class n extends Error{constructor(t,r,i){super(t),this.status=r,this.details=i,this.name="ApiError"}}class u{constructor(){this.retryAttempts=3,this.retryDelay=1e3,this.baseUrl="https://<api-id>.execute-api.us-east-1.amazonaws.com/prod"}async makeRequest(t,r={},i=1){try{const s=`${this.baseUrl}${t}`,a=await fetch(s,{headers:{"Content-Type":"application/json",...r.headers},...r});if(!a.ok){let e=`HTTP ${a.status}`,o={};try{const c=await a.json();e=c.error||c.message||e,o=c.details||c}catch{e=a.statusText||e}switch(a.status){case 400:e=`잘못된 요청: ${e}`;break;case 401:e=`인증이 필요합니다: ${e}`;break;case 403:e=`접근이 거부되었습니다: ${e}`;break;case 404:e=`요청한 리소스를 찾을 수 없습니다: ${e}`;break;case 429:e=`요청이 너무 많습니다. 잠시 후 다시 시도해주세요: ${e}`;break;case 500:e=`서버 오류가 발생했습니다: ${e}`;break;case 503:e=`서비스가 일시적으로 사용할 수 없습니다: ${e}`;break}throw new n(e,a.status,o)}return await a.json()}catch(s){if(s instanceof n)throw s;if(i<this.retryAttempts&&this.shouldRetry(s))return await this.delay(this.retryDelay*i),this.makeRequest(t,r,i+1);throw new n(s instanceof Error?s.message:"Network error",0,{originalError:s})}}shouldRetry(t){return t instanceof TypeError||t.name==="NetworkError"||t.code==="NETWORK_ERROR"}delay(t){return new Promise(r=>setTimeout(r,t))}async checkHealth(){return this.makeRequest("/api/health")}async getSubjects(){return this.makeRequest("/api/subjects")}async sendChatMessage(t){return this.makeRequest("/api/chat",{method:"POST",body:JSON.stringify(t)})}async sendFeedback(t){return this.makeRequest("/api/feedback",{method:"POST",body:JSON.stringify(t)})}async testConnection(){try{return await this.checkHealth(),!0}catch{return!1}}}const y=new u;export{n as A,y as a};
